// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String
  password    String
  accessToken String?
  type        UserType @default(CLIENT)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tickets     Ticket[]
}

enum UserType {
  ADMIN
  CLIENT
}

model Space {
  id             String       @id @default(uuid())
  name           String
  description    String
  clientsPerSlot Int
  ruleSet        SpaceRuleSet?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
}

model SpaceRuleSet {
  id String @id @default(uuid())

  space   Space  @relation(fields: [spaceId], references: [id])
  spaceId String @unique

  limit Int
  type  RuleSetTypeEnum @default(DAILY)

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RuleSetTypeEnum {
  DAILY
  WEEKLY
  MONTHLY
}

model Event {
  id String @id @default(uuid())
  rule String
  space   Space  @relation(fields: [spaceId], references: [id])
  spaceId String
  eventDetails   EventDetails @relation(fields: [eventDetailsId], references: [id])
  eventDetailsId String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventsBooked EventBooked[]
}

model EventDetails {
  id          String @id @default(uuid())
  title       String
  description String

  duration Float
  slots    Int
  type     EventTypeEnum @default(OCCURRENCE)

  event Event?

  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  eventsBooked EventBooked[]
}

enum EventTypeEnum {
  EVENT
  OCCURRENCE
  BOOKED
  CANCELED
  EXCEPTION
}

model EventBooked {
  id String @id @default(uuid())

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  eventDetails   EventDetails @relation(fields: [eventDetailsId], references: [id])
  eventDetailsId String

  date DateTime

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tickets Ticket[]

  @@unique([eventId, date])
}

model Ticket {
  id     String       @id @default(uuid())
  status TicketStatus @default(RESERVED)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  bookedEvent   EventBooked @relation(fields: [bookedEventId], references: [id])
  bookedEventId String

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TicketStatus {
  RESERVED
  USED
  CANCELED
}
