### This file was generated by Nexus Schema
### Do not make changes to this file directly


input CreateDayInput {
  date: DateTime!
}

input CreateSlotInput {
  dayId: ID!
  endTime: DateTime!
  startTime: DateTime!
  usersLimit: Int!
}

input CreateSpaceInput {
  clientsPerSlot: Int!
  description: String!
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Day {
  active: Boolean!
  createdAt: DateTime!
  date: DateTime!
  id: ID!
  slots: [Slot!]
  updatedAt: DateTime!
}

input LoginUserInput {
  email: String!
  password: String!
}

type LoginUserResult {
  accessToken: String!
  user: User!
}

input MakeReservationInput {
  slotId: ID!
}

type Mutation {
  """Allows a ADMIN to create a space for a company """
  CreateSpace(input: CreateSpaceInput!): Space

  """Allows a CLIENT to reserve a spot on a slot"""
  MakeReservation(input: MakeReservationInput!): Ticket

  """Allows a ADMIN to create a day on the system. """
  createDay(input: CreateDayInput!): Day

  """Allows a ADMIN to create a slot on a day on the system. """
  createSlot(input: CreateSlotInput!): Slot

  """Login a user"""
  loginUser(input: LoginUserInput!): LoginUserResult

  """Logout user"""
  logoutUser: Boolean

  """Registers a user"""
  registerUser(input: RegisterUserInput!): User
}

type Query {
  """."""
  GetDay(date: DateTime!): Day

  """."""
  GetSlot(id: ID!): Slot

  """Get current user."""
  me: User
}

input RegisterUserInput {
  email: String!
  name: String!
  password: String!
  passwordConfirmation: String!
}

type Slot {
  active: Boolean!
  activeTicketsCount: Int!
  createdAt: DateTime!
  endTime: DateTime!
  id: ID!
  startTime: DateTime!
  tickets: [Ticket]!
  updatedAt: DateTime!
  usersLimit: Int!
}

type Space {
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type Ticket {
  active: Boolean!
  createdAt: DateTime!
  id: ID!
  slots: [Slot!]
  status: TicketStatus!
  updatedAt: DateTime!
  user: User
}

enum TicketStatus {
  CANCELED
  RESERVED
  USED
}

type User {
  active: Boolean!
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  type: UserType!
  updatedAt: DateTime!
}

enum UserType {
  ADMIN
  CLIENT
}
