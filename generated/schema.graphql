### This file was generated by Nexus Schema
### Do not make changes to this file directly


input CreateEventInput {
  eventDetails: CreateEvent_EventDetailsInput!
  rule: String!
  spaceId: ID!
}

input CreateEvent_EventDetailsInput {
  description: String!
  duration: Float!
  slots: Int!
  title: String!
}

input CreateSpaceInput {
  clientsPerSlot: Int!
  description: String!
  name: String!
  ruleSet: CreateSpace_RuleSetInput!
}

input CreateSpace_RuleSetInput {
  limit: Int!
  type: RuleSetTypeEnum!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Event {
  active: Boolean
  createdAt: DateTime
  eventDetails: EventDetails
  id: ID!
  rule: String!
  updatedAt: DateTime
}

type EventDetails {
  active: Boolean
  createdAt: DateTime
  description: String
  duration: Float
  id: ID!
  slots: Int
  title: String
  type: EventTypeEnum!
  updatedAt: DateTime
}

type EventInstance {
  active: Boolean
  createdAt: DateTime
  date: DateTime!
  eventDetails: EventDetails
  id: ID!
  isCanceled: Boolean
  isRescheduled: Boolean
  parent: Event
  updatedAt: DateTime
}

enum EventTypeEnum {
  BOOKED
  CANCELED
  EVENT
  EXCEPTION
  OCCURRENCE
}

input GetOccurrencesInput {
  endTime: DateTime!
  spaceIds: [String!]
  startTime: DateTime!
}

input GetSpaceEventsInput {
  spaceId: ID!
}

input LoginUserInput {
  email: String!
  password: String!
}

type LoginUserResult {
  accessToken: String!
  user: User!
}

input MakeReservationInput {
  date: DateTime!
  parentId: ID!
}

type Mutation {
  """Allows a ADMIN to create a event for a space"""
  CreateEvent(input: CreateEventInput!): Event

  """Allows a ADMIN to create a space for a company """
  CreateSpace(input: CreateSpaceInput!): Space

  """Login a user"""
  LoginUser(input: LoginUserInput!): LoginUserResult

  """Logout user"""
  LogoutUser: Boolean

  """Allows a CLIENT to reserve a spot on a slot"""
  MakeReservation(input: MakeReservationInput!): Ticket

  """Registers a user"""
  RegisterUser(input: RegisterUserInput!): User
}

type Occurrence {
  active: Boolean
  availableSlots: Int
  createdAt: DateTime
  date: DateTime!
  description: String
  duration: Float
  id: ID!
  isCanceled: Boolean!
  isParentEvent: Boolean!
  isRescheduled: Boolean!
  parentId: ID!
  slots: Int!
  title: String
  type: EventTypeEnum!
  updatedAt: DateTime
}

type Query {
  """Get occurences"""
  GetOccurences(input: GetOccurrencesInput!): [Occurrence!]

  """Get space's events """
  GetSpaceEvents(input: GetSpaceEventsInput!): [Event!]

  """Get all spaces"""
  GetSpaces: [Space!]

  """Get current user's tickets"""
  GetUserTickets: [Ticket!]

  """Get space"""
  Space(spaceId: ID!): Space

  """Get current user."""
  me: User
}

input RegisterUserInput {
  email: String!
  name: String!
  password: String!
  passwordConfirmation: String!
}

enum RuleSetTypeEnum {
  DAILY
  MONTHLY
  WEEKLY
}

type Space {
  active: Boolean!
  clientsPerSlot: Int!
  createdAt: DateTime!
  description: String!
  events: [Event!]
  id: ID!
  name: String!

  """Get space events occurrences"""
  occurrences(occurrencesInput: GetOccurrencesInput!): [Occurrence!]
  ruleSet: SpaceRuleSet
  tickets(take: Int): [Ticket!]
  updatedAt: DateTime!
}

type SpaceRuleSet {
  active: Boolean!
  createdAt: DateTime!
  id: ID!
  limit: Int!
  type: RuleSetTypeEnum!
  updatedAt: DateTime!
}

type Ticket {
  active: Boolean!
  createdAt: DateTime!
  eventInstance: EventInstance
  id: ID!
  status: TicketStatus!
  updatedAt: DateTime!
  user: User!
}

enum TicketStatus {
  CANCELED
  RESERVED
  USED
}

type User {
  active: Boolean!
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  type: UserType!
  updatedAt: DateTime!
}

enum UserType {
  ADMIN
  CLIENT
}
