/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateSlotInput: { // input type
    endTime: NexusGenScalars['DateTime']; // DateTime!
    numberOfClientsLimit: number; // Int!
    spaceId: string; // ID!
    startTime: NexusGenScalars['DateTime']; // DateTime!
  }
  CreateSpaceInput: { // input type
    clientsPerSlot: number; // Int!
    description: string; // String!
    name: string; // String!
  }
  LoginUserInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  MakeReservationInput: { // input type
    slotId: string; // ID!
  }
  RegisterUserInput: { // input type
    email: string; // String!
    name: string; // String!
    password: string; // String!
    passwordConfirmation: string; // String!
  }
}

export interface NexusGenEnums {
  TicketStatus: "CANCELED" | "RESERVED" | "USED"
  UserType: "ADMIN" | "CLIENT"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  LoginUserResult: { // root type
    accessToken: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: {};
  Query: {};
  Slot: { // root type
    active: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    endTime: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    numberOfClientsLimit: number; // Int!
    startTime: NexusGenScalars['DateTime']; // DateTime!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Space: { // root type
    active: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Ticket: { // root type
    active: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    status: NexusGenEnums['TicketStatus']; // TicketStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // root type
    active: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    type: NexusGenEnums['UserType']; // UserType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  LoginUserResult: { // field return type
    accessToken: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: { // field return type
    CreateSpace: NexusGenRootTypes['Space'] | null; // Space
    MakeReservation: NexusGenRootTypes['Ticket'] | null; // Ticket
    createSlot: NexusGenRootTypes['Slot'] | null; // Slot
    loginUser: NexusGenRootTypes['LoginUserResult'] | null; // LoginUserResult
    logoutUser: boolean | null; // Boolean
    registerUser: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    GetSlot: NexusGenRootTypes['Slot'] | null; // Slot
    GetSpaces: NexusGenRootTypes['Space'][] | null; // [Space!]
    me: NexusGenRootTypes['User'] | null; // User
  }
  Slot: { // field return type
    active: boolean; // Boolean!
    activeTicketsCount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    endTime: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    numberOfClientsLimit: number; // Int!
    startTime: NexusGenScalars['DateTime']; // DateTime!
    tickets: Array<NexusGenRootTypes['Ticket'] | null>; // [Ticket]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Space: { // field return type
    active: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Ticket: { // field return type
    active: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    status: NexusGenEnums['TicketStatus']; // TicketStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    active: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    type: NexusGenEnums['UserType']; // UserType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  LoginUserResult: { // field return type name
    accessToken: 'String'
    user: 'User'
  }
  Mutation: { // field return type name
    CreateSpace: 'Space'
    MakeReservation: 'Ticket'
    createSlot: 'Slot'
    loginUser: 'LoginUserResult'
    logoutUser: 'Boolean'
    registerUser: 'User'
  }
  Query: { // field return type name
    GetSlot: 'Slot'
    GetSpaces: 'Space'
    me: 'User'
  }
  Slot: { // field return type name
    active: 'Boolean'
    activeTicketsCount: 'Int'
    createdAt: 'DateTime'
    endTime: 'DateTime'
    id: 'ID'
    numberOfClientsLimit: 'Int'
    startTime: 'DateTime'
    tickets: 'Ticket'
    updatedAt: 'DateTime'
  }
  Space: { // field return type name
    active: 'Boolean'
    createdAt: 'DateTime'
    description: 'String'
    id: 'ID'
    name: 'String'
    updatedAt: 'DateTime'
  }
  Ticket: { // field return type name
    active: 'Boolean'
    createdAt: 'DateTime'
    id: 'ID'
    status: 'TicketStatus'
    updatedAt: 'DateTime'
    user: 'User'
  }
  User: { // field return type name
    active: 'Boolean'
    createdAt: 'DateTime'
    email: 'String'
    id: 'ID'
    name: 'String'
    type: 'UserType'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    CreateSpace: { // args
      input: NexusGenInputs['CreateSpaceInput']; // CreateSpaceInput!
    }
    MakeReservation: { // args
      input: NexusGenInputs['MakeReservationInput']; // MakeReservationInput!
    }
    createSlot: { // args
      input: NexusGenInputs['CreateSlotInput']; // CreateSlotInput!
    }
    loginUser: { // args
      input: NexusGenInputs['LoginUserInput']; // LoginUserInput!
    }
    registerUser: { // args
      input: NexusGenInputs['RegisterUserInput']; // RegisterUserInput!
    }
  }
  Query: {
    GetSlot: { // args
      id: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}